#lang racket
(define (accumulate op init lat)
  (if (null? lat) init
      (accumulate op (op (car lat) init) (cdr lat))))

(define (flatmap proc lat)
  (accumulate append '() (map proc lat)))

(define (make-interval l h)
  (if (> l h) '()
      (cons l (make-interval (+ l 1) h))))
                
(define (queens board-size)
  (define (adjoin-position row col scene)
    (append scene (list (list col row))))
  (define (safe? k positions)
    (let ((row (cadr (assoc k positions))))
      (null? (filter (lambda (pos)
                (let ((i (car pos))
                      (j (cadr pos)))
                  (and (not (= i k))
                       (or (= j row)
                           (= (- k i) (- row j))
                           (= (- k i) (- j row))))))
              positions))))
  (define (queen-cols k)
    (if (= k 0)
        (list '())        
        (filter (lambda (positions)
                  (safe? k positions))
                (flatmap (lambda (rest-of-queens)
                           (map (lambda (new-row)
                                  (adjoin-position new-row k rest-of-queens))
                                (make-interval 1 board-size)))
                         (queen-cols (- k 1))))))
  (map (lambda (x)
         (map cadr x))
       (queen-cols board-size)))
(queens 8)