#lang racket
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))                    
        (else
         (error "unknown expression type -- DERIV" exp))))

(define (variable? exp) (symbol? exp))
(define (same-variable? exp var)
  (and (variable? exp) (variable? var) (eq? exp var)))
(define (=number? exp num)
  (and (number? exp) (number? num) (= exp num)))
(define (=length? lat len)
  (and (pair? lat) (= (length lat) len)))

(define (sum? exp)    
  (member '+ exp))    
(define (addend exp)
  (define (iter lat)
    (if (eq? (car lat) '+) '()
        (cons (car lat) (iter (cdr lat)))))
  (if (eq? (cadr exp) '+) (car exp)
      (iter exp)))
(define (augend exp) 
  (let ((b (cdr (member '+ exp))))
    (if (=length? b 1) (car b) b)))        

(define (make-sum a1 a2)  
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else
         (let ((pair1? (pair? a1))
               (pair2? (pair? a2)))
           (cond ((and pair1? pair2?) (append a1 (cons '+ a2)))
                 ((and pair1? (not pair2?)) (append a1 (list '+ a2)))
                 ((and (not pair1?) pair2?) (append (list a1 '+) a2))
                 (else (list a1 '+ a2)))))))

(define (product? exp)
  (if (not (pair? exp)) false
      (if (=length? exp 3) 
          (eq? (cadr exp) '*)
          (product? (cddr exp)))))    
(define (multiplier exp) (car exp))
(define (multiplicand exp) 
  (if (=length? exp 3) (caddr exp)
      (cddr exp)))
(define (make-product p1 p2)  
  (cond ((or (=number? p1 0) (=number? p2 0)) 0)
        ((=number? p1 1) p2)
        ((=number? p2 1) p1)
        ((and (number? p1) (number? p2)) (* p1 p2))
        ((and (pair? p1) (pair? p2))
         (cond ((and (sum? p1) (sum? p2)) (list p1 '* p2))
               ((and (sum? p1) (not (sum? p2))) (append (list p1 '*) p2))
               ((and (not (sum? p1)) (sum? p2)) (append p1 (list '* p2)))
               (else (append p1 (cons '* p2)))))
        ((and (pair? p1) (not (pair? p2)))
         (if (sum? p1) (append (list p1 '*) (list p2))
             (append p1 (list '* p2))))
        ((and (not (pair? p1)) (pair? p2))
         (if (sum? p2) (cons p1 (list '* p2))
             (append (list p1 '*) p2)))
        (else
         (list p1 '* p2))))

(deriv '(x + 3 * (x + y + 2)) 'x)
(deriv '(x + 3) 'x)
(deriv '(x * y) 'x)

(deriv '(x * y * (x + 3) ) 'x)
(deriv '(x * x + x * x * y * (x + 3) + x * y) 'x)